#!/usr/bin/env raku
use lib '../lib';
use CLI::AWS::EC2-Simple;

# first go `aws configure` to populate $HOME/.aws/credentials

enum Command <list launch setup ip connect state stop start terminate nuke xxx>;

sub MAIN(
    Command $cmd,                           #= One of <list launch setup ip connect state stop start terminate nuke>
    Str    :$id,                            #= Running InstanceId of form 'i-0785d8bd98b5f458b'
    Bool   :$nsu,                           #= No setup (suppress launch from running setup)
    Bool   :$eip,                           #= Allocates (if needed) and Associates Elastic IP
    Bool   :$q,                             #= Quiet mode (suppress echo for connect only) 
    Bool   :$y,                             #= Silence confirmation <nuke> cmd only
    #Str    :$id, # where /'i-' \w ** 16/,   #= Running InstanceId of form 'i-0785d8bd98b5f458b'
) {
    say $cmd unless $q;

    my $s = Session.new(:$q);

    sub focus-id {
        if $id {				#id is specified

            if $id ∈ $s.instance-ids.Set {
                return $id
            } else {
                die "Instance Id $id not found in this Session"
            }

        } else {				#id is not specified

            if $s.instance-ids.elems == 1 {	#only one id in active set
                return $s.instance-ids[0] 

            } else {				#id in .raws-temp file is in active set
		my $temp-id = return slurp './.raws-temp';
		if $temp-id ∈ $s.instance-ids.Set {
		    return $temp-id
		} else {
		    die "Instance Id $temp-id not found in this Session, perhaps it was terminated"
		}
            }
        }
    }

    given $cmd {
        when 'list' {
            for $s.instance-ids.sort -> $id {
                my $i = Instance.new( :$s, :$id );
                say "$id => {$i.state} [{$i.nametag}]";
            }
        }
        when 'launch' {
            if $id  {die 'cannot launch an existing Instance'}

            my $i = Instance.new(:$s);
            $i.launch;
            
            spurt './.raws-temp', $i.id;     # remember last one

            if $eip { $i.eip-associate }

            if ! $nsu { $i.setup }

            $i.id.say;
        }
        when 'setup' {
            Instance.new( :$s, id => focus-id ).setup
        }
        when 'ip' {
            Instance.new( :$s, id => focus-id ).public-ip-address.say
        }
        when 'connect' {
            Instance.new( :$s, id => focus-id ).connect.say
        }
        when 'state' {
            Instance.new( :$s, id => focus-id ).state.say
        }
        when 'stop' {
            Instance.new( :$s, id => focus-id ).stop
        }
        when 'start' {
            Instance.new( :$s, id => focus-id ).start
        }
        when 'terminate' {
            Instance.new( :$s, id => focus-id ).terminate
        }
        when 'nuke' {
            unless $y {                     # silence check
                my $check = prompt "This will terminate all instances. You sure (y/N)? ";

                unless $check eq 'y' { die "Aborting operation..." }
            }

            for $s.instance-ids -> $id {
                Instance.new( :$s, :$id ).terminate
            }
        }
    }
}

